MODULE: 5 (Database)

Q1. What do you understand By Database
A database is an electronically stored, systematic collection of data. It can contain any type of data, including words, numbers, images, videos, and files. Databases often store information about people, such as customers or users. 
Let's understand it by couple of examples:
- social media platforms use databases to store user information, such as names, email addresses and user behavior,etc.
- hospitals have to deal with number of data like patients, visitors, staff and they need to track their details. So all of those bunch of data called database.

Q2. What is Normalization?
Normalization is the process of organizing the data in the database. Normalization divides the larger table into smaller and links them using relationships.
It is a method used in the design of databases to create a neat, structured, and structured table in which each table relates to just one subject or one-to-one correspondence.


Q3. What is Difference between DBMS and RDBMS?
DBMS can handle any kind of data, like it may be structured or semi structured or unstructured also, and there is no concept of relations in DBMS, but RDBMS on the other hand composed of tuples and tables and tables are related to each other with key constraints. Most of today's database are relational as one database contains 1 or more table, one table contains 1 or more records, one record contains 1 or more fields and fields contains data.
Mongo DB, Cassandra are some popular examples of DBMS while MySQL, Oracle Database, Microsoft SQL Server are the most common examples of RDBMS.

Q4. What is MF Cod Rule of RDBMS Systems?
Rule 0: The Foundation Rule
The DB must be structured in a relational manner so that the system’s relational capabilities can manage the DB.

Rule 1: The Information Rule
A DB comprises a variety of data, which must be recorded in the form of columns and rows in each and every cell of a table.

Rule 2: The Guaranteed Access Rule
A relational DB’s primary key value, column name, and table name can be used to conceptually retrieve any single or precise data (the atomic value).

Rule 3: The Systematic Treatment of Null Values
The treatment of Null values in DB records is defined by this rule. No value in a cell, missing data, unsuitable information, unknown data, the primary key that should not be null, etc., are all examples of null values in DBs.

Rule 4: The Dynamic/Active Online Catalog on the basis of the Relational Model
A DB dictionary is a logical representation of the whole logical structure of a descriptive DB that needs to be stored online. It grants users access to the DB and uses a query language that is comparable to that of the DB.

Rule 5: The Comprehensive Data SubLanguage Rule
The relational DB supports a variety of languages, and in order to access the DB, the language has to be linear, explicit, or a well-defined syntax, character strings. It must support the following operations: view definition, integrity constraints, data manipulation, data definition, as well as limit transaction management. It is considered a DB violation if the DB permits access to the data and information without the use of any language.

Rule 6: The View Updating Rule
A view table can theoretically be updated, and DB systems must update them in practice.

Rule 7: The Relational Level Operation (or High-Level Insert, Delete, and Update) Rule
In each level or single row, a DB system should adhere to high-level relational operations (for example, update, insert, and delete). The DB system also includes operations like intersection, union, and minus.

Rule 8: The Physical Data Independence Rule
To access a DB or an application, all stored data must be independent physically. Each piece of data should not be reliant on another piece of data or an application. External applications that access data from the DB will have no effect if data is altered or the physical structure of a given DB is modified.

Rule 9: The Logical Data Independence Rule
It’s similar to the independence of physical data. It indicates that any modifications made at the logical level (or the table structures) should not have an impact on the user’s experience (application). For example, if a table is split into two separate tables or into two table joins in order to produce a single table, the application at the user view should not be affected.

Rule 10: The Integrity Independence Rule
When we are using SQL to put data into table cells, a DB must guarantee integrity independence. All the entered values must not be changed, and the integrity of the data should not be reliant on any external component or application. It’s also useful for making each front-end app DB-independent.

Rule 11: The Distribution Independence Rule
This rule denotes that a DB must function properly even if it’s stored in multiple locations and used by various end-users. Let’s say a person uses an application to access the DB. In such a case, they must not be aware that another user is using the same data, and thus, the data they always obtain is only available on one site. The DB can be accessed by end-users, and each user’s access data must be independent in order for them to run SQL queries.

Rule 12: The Non-Subversion Rule
RDBMS is defined by this rule as a SQL language for storing and manipulating data in a DB. If a system uses a low-level or different language to access the DB system other than SQL, it should not bypass or subvert data integrity.

Q5. What do you understand By Data Redundancy?
Data redundancy occurs when the same piece of data is stored in two or more separate places and is a common occurrence in many businesses. 
Sometimes data redundancy happens by accident while other times it is intentional. Accidental data redundancy can be the result of a complex process or inefficient coding while intentional data redundancy can be used to protect data and ensure consistency — simply by leveraging the multiple occurrences of data for disaster recovery and quality checks.

Q6. What is DDL Interpreter?
The DDL (date definition language) Interpreter interprets DDL statements like those used in schema definition like create, remove etc into  a set of tables containing meta data or data dictionary.

Q7. What is DML Compiler in SQL?
The DML (data manipulation language) which allows users to add, update, and delete data in a database, Compiler processes the DML statements into low level instruction (machine language), so that they can be executed.

Q8. What is SQL Key Constraints writing an Example of SQL Key Constraints
The set of rules predefined in DB table called Key Constraints.

create table employees
(employee_id int unique not null  default primary key,
first_name varchar() not null,
last_name varchar() not null);

In above example, unique, not null & primary Key are SQL Constraints.

Q9. What is save Point? How to create a save Point write a Query?
The SAVE POINT command in SQL allow to set point within a transaction to which we can roll back without affecting the entire transaction. We can roll back to a specific SAVEPOINT instead of rolling back the entire transaction. This allows us to undo part of the transaction rather than the entire transaction.

Q10. What is trigger and how to create a Trigger in SQL?
A trigger is a special type of stored procedure that automatically runs when an event occurs in the database server. Please refer below example of trigger set up in SQL.

create table student(
st_name varchar (25) not null,
maths int not null,
english int not null,
Total int
);

create trigger add_data
before insert on mydb.student
for each row
set new.Total = new.Maths + new.English;

insert into student (st_name,maths,english) values ('Rahul',85,74);
select * from student



Task
1. Create Table Name : Student and Exam

create table Students
(Rollno int not null Primary key,
Name varchar(50) not null,
Branch varchar(50) not null
);
create table Exam
(Rollno int not null,
S_code varchar(10) not null,
Marks int not null,
P_Code varchar(10)
);

insert into students values (1,'Jay','Computer Science');
insert into students values (2,'Sulhani','Electronic & Com');
insert into students values (3,'Kriti','Electronic & Com');

insert into exam values (1,'CS11',50,'CS');
insert into exam values (1,'CS12',60,'CS');
insert into exam values (2,'EC101',66,'EC');
insert into exam values (2,'EC102',70,'EC');
insert into exam values (3,'EC101',45,'EC');
insert into exam values (3,'EC102',50,'EC');

Select * From students
Select * From exam


2. Create table given below 

Create table Personal_Details
(First_Name varchar(20),
Last_Name varchar(20),
Address varchar (50),
City varchar (20),
Age int);

insert into Personal_details values ('Mickey','Mouse','123 Fantasy Way','Anaheim',73);
insert into Personal_details values ('Bat','Man','321 Cavem Ave','Gotham',54);
insert into Personal_details values ('Wonder','Woman','987 Truth Way','Paradise',39);
insert into Personal_details values ('Donald','Duck','555 Quack Street','Mallard',65);
insert into Personal_details values ('Bugs','Bunny','567 Carrot Street','Rascal',58);
insert into Personal_details values ('Wiley','Coyote','999 Acme Way','Canyon',61);
insert into Personal_details values ('Cat','Woman','234 Purrfect Street','Hairball',32);
insert into Personal_details values ('Tweety','Bird','543','Itotlaw',28);

Select * From Personal_details

3. Create table given below: Employee and Incentive
Table Name: Employee

Table Name: Incentive 


Create table Employee
(EmployeeID int not null Primary key,
First_Name varchar(20),
Last_Name varchar(20),
Salary float,
Joining_Date datetime,
Department varchar (20)
);
Create table Incentive
(Employee_ref_id int not null,
Incentive_date date,
Incentive_amount int
);

insert into Employee values(1,'John','Abraham',1000000,'2013-01-01','Banking' );
insert into Employee values(2,'Michael','Clarke',800000,'2013-01-01','Insurance' );
insert into Employee values(3,'Roy','Thomas',700000,'2013-02-01','Banking' );
insert into Employee values(4,'Tom','Jose',600000,'2013-02-01','Insurance' );
insert into Employee values(5,'Jerry','Pinto',650000,'2013-02-01','Insurance' );
insert into Employee values(6,'Philip','Mathew',750000,'2013-01-01','Services' );
insert into Employee values(7,'TestName1','123',650000,'2013-01-01','Services' );
insert into Employee values(8,'TestName2','Lname%',600000,'2013-02-01','Insurance' );

Select * From Employee

insert into Incentive values (1,'2013-02-01', 5000);
insert into Incentive values (2,'2013-02-01', 3000);
insert into Incentive values (3,'2013-02-01', 4000);
insert into Incentive values (1,'2013-01-01', 4500);
insert into Incentive values (2,'2013-01-01', 4500);
Select * From Incentive

#  Get First_Name from employee table using Tom name “Employee Name”.

Select First_Name as Employee_Name From Employee Where First_Name like 'Tom'

# Get FIRST_NAME, Joining Date, and Salary from employee table. 

Select First_Name,Joining_Date,Salary From Employee

# Get all employee details from the employee table order by First_Name Ascending and Salary descending?

Select * From Employee order by 2 asc,4 desc

# Get employee details from employee table whose first name contains ‘J’.
Select * From Employee where First_Name like 'J%'

#  Get department wise maximum salary from employee table order by salary ascending?
Select Distinct Department,Max(Salary) From Employee Group by Department

# Select first_name, incentive amount from employee and incentives table for those employees who have incentives and incentive amount greater than 3000
Select First_name,incentive_amount
From Employee a  Join Incentive b on a.EmployeeID=b.Employee_ref_id where Incentive_amount > 3000

# Create After Insert trigger on Employee table which insert records in view table
create table Insert_View
(EmployeeID int not null,
First_Name varchar(20),
Last_Name varchar(20),
Salary float,
Joining_Date date,
Department varchar (20))
# alter table insert_view add column entered_time datetime;
create trigger Insert_trigger
after insert on mydb.employee
for each row
insert into Insert_View values (new.employeeID,new.First_name,new.Last_Name,new.Salary,new.Joining_date,new.department,now());

insert into employee values(9,'TestName3','Lnam',60000,'2013-02-01','Insurance' );
select * from employee
select * from Insert_View


4. Create table given below: Salesperson and Customer


create table SALESPERSON
(SNO int not null Primary key,
SNAME varchar (20) not null,
CITY VARCHAR (20) ,
COMM decimal (5,2)
)
#alter table salesperson modify Comm decimal (5,2);

create table CUSTOMER
(CNM int not null Primary key,
CNAME varchar (20),
CITY varchar (20),
RATING int,
SNO int,
Foreign Key (SNO) references SALESPERSON(SNO)
);
insert into salesperson VALUES (1001,'Peel','London',0.12);
insert into salesperson VALUES (1002,'Serres','San Jose',0.13);
insert into salesperson VALUES (1004,'Motika','London',0.11);
insert into salesperson VALUES (1007,'Rafkin','Barcelona',0.15);
insert into salesperson VALUES (1003,'Axelrod','New York',0.1);

insert into customer values (201,'Hoffman','London',100,1001);
insert into customer values (202,'Giovanne','Rome',200,1003);
insert into customer values (203,'Liu','San Jose',300,1002);
insert into customer values (204,'Grass','Barcelona',100,1002);
insert into customer values (206,'Clemens','London',300,1007);
insert into customer values (207,'Pereira','Rome',100,1004);
#update customer set City= 'Rome'where CNM = 207

# Retrieve the below data from above table
# a) All orders for more than $1000. ???
# b) Names and cities of all salespeople in London with commission above 0.12
Select Sname,City,comm from salesperson where comm > .12
# c) All salespeople either in Barcelona or in London 
Select Sname,City,comm from salesperson where city in ('Barcelona','London')
# d) All salespeople with commission between 0.10 and 0.12. (Boundary values should be excluded). 
Select Sname,City,comm from salesperson where comm > 0.10 and comm < 0.12
# e) All customers excluding those with rating <= 100 unless they are located in Rome 
Select * From Customer where rating >= 100 and City not in ('Rome')
